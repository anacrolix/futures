// Code generated by go2go; DO NOT EDIT.


//line delayed.go2:1
package futures

//line delayed.go2:1
import (
//line delayed.go2:1
 "context"
//line delayed.go2:1
 "fmt"
//line delayed.go2:1
 "github.com/anacrolix/missinggo/slices"
//line delayed.go2:1
 "github.com/bradfitz/iter"
//line delayed.go2:1
 "sort"
//line delayed.go2:1
 "sync"
//line delayed.go2:1
 "testing"
//line delayed.go2:1
 "time"
//line delayed.go2:1
)

//line delayed.go2:5
func timeoutFuture(timeout time.Duration) *instantiate୦୦F୦struct୮4୮5 {
	return instantiate୦୦Start୦struct୮4୮5(func() (_ struct{}, _ error) {
		time.Sleep(timeout)
		return
	})
}

//line delayed.go2:10
type instantiate୦୦F୦struct୮4୮5 struct {
//line future.go2:25
 name string
			mu     sync.Mutex
			result struct{}

//line future.go2:28
 err  error
			done chan struct{}
}

func (f *instantiate୦୦F୦struct୮4୮5,) String() string {
	if f.name != "" {
		return f.name
	}
	return fmt.Sprintf("future %p", f)
}

func (f *instantiate୦୦F୦struct୮4୮5,) SetName(s string) {
	f.name = s
}

func (f *instantiate୦୦F୦struct୮4୮5,) Err() error {
	<-f.done
	return f.err
}

//line future.go2:49
func (f *instantiate୦୦F୦struct୮4୮5,) Result() (struct{},

//line future.go2:49
 error) {
	<-f.done
	f.mu.Lock()
	defer f.mu.Unlock()
	return f.result, f.err
}

func (f *instantiate୦୦F୦struct୮4୮5,) MustResult() struct{} {
	val, err := f.Result()
	if err != nil {
		panic(err)
	}
	return val
}

func (f *instantiate୦୦F୦struct୮4୮5,) Done() <-chan struct{} {
	return f.done
}

func (f *instantiate୦୦F୦struct୮4୮5,) setResult(result struct{},

//line future.go2:68
 err error) {
	f.mu.Lock()
	defer f.mu.Unlock()
	f.result = result
	f.err = err
	close(f.done)
}

func (f *instantiate୦୦F୦struct୮4୮5,) ScanResult(res *struct{},

//line future.go2:76
) (err error) {
	*res, err = f.Result()
	return
}
//line future.go2:8
func instantiate୦୦Start୦struct୮4୮5(fn func() (struct {
//line future.go2:8
}, error)) *instantiate୦୦F୦struct୮4୮5 {
	f := &instantiate୦୦F୦struct୮4୮5{
		done: make(chan struct{}),
	}
	go func() {
		f.setResult(fn())
	}()
	return f
}

//line future.go2:16
type Importable୦ int

//line future.go2:16
var _ = context.Background
//line future.go2:16
var _ = fmt.Errorf
//line future.go2:16
var _ = slices.FilterInPlace
//line future.go2:16
var _ = iter.N

//line future.go2:16
type _ sort.Float64Slice
//line future.go2:16
type _ sync.Cond

//line future.go2:16
var _ = testing.AllocsPerRun

//line future.go2:16
const _ = time.ANSIC
